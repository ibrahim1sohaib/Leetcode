135. Candy

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

;;;;
java
;;;;
class Solution {
    public int candy(int[] ratings) {
        int n = ratings.length;
        int[] candies = new int[n];

        // Give each child 1 candy as a baseline [1,1,1]
        Arrays.fill(candies, 1); [

        // Traverse from left to right, ensuring a child with a higher rating gets more candies than its left neighbor if needed
        for (int i = 1; i < n; i++) {
            if (ratings[i] > ratings[i - 1]) {
                candies[i] = candies[i - 1] + 1;
            }
        }

        // Traverse from right to left, ensuring a child with a higher rating gets more candies than its right neighbor if needed
        for (int i = n - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) {
                candies[i] = Math.max(candies[i], candies[i + 1] + 1);
            }
        }

        // Sum up the total candies distributed
        int totalCandies = 0;
        for (int candy : candies) {
            totalCandies += candy;
        }

        return totalCandies;
    }
}

;;;;;;;;;;;;;;;;;;;;;
Input: ratings = [1,0,2]

1. filling candies array with vasecase 
    candies :::::[1,1,1]
2. traverse from left to right
   rating[i]<ratings[i+1]     // 0<2
    we update candies[i] with candies[i-1]+1
          candies ::::: [1,1,2]
3. traverse from right to left
   for(i=n-2; i>=0;i--)
   ratings[i]>ratings[i+1]   // 1>0
    candies[i]= max[i, (i+1)+1]
         candies ::::: [2,1,2]

4. foreach loop
    return candiesnsum=5
           
 
