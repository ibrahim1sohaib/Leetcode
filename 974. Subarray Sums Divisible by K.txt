974. Subarray Sums Divisible by K

Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]



;;;;
java
;;;;
class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int count = 0;  // Variable to store the count of subarrays with sum divisible by k
        int sum = 0;    // Variable to store the running sum

        // Map to store the frequency of remainder when divided by k
        Map<Integer, Integer> remainderFreq = new HashMap<>();
        remainderFreq.put(0, 1);  // Initialize with 0 to handle subarrays starting from index 0

        for (int num : nums) {
            sum = (sum + num % k + k) % k;  // Update the running sum and handle negative numbers

            // Check if (sum - k) exists in the map
            if (remainderFreq.containsKey((sum - k + k) % k)) {
                // If yes, add its frequency to the count
                count += remainderFreq.get((sum - k + k) % k);
            }

            // Update the frequency of the current remainder in the map
            remainderFreq.put(sum, remainderFreq.getOrDefault(sum, 0) + 1);
        }

        return count;  // Return the final count of subarrays with sum divisible by k
    }
}
