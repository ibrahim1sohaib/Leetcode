994. Rotting Oranges

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.


example1: 
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4



;;;;
java
;;;;
class Solution {
    public int orangesRotting(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return -1;
        }

        int rows = grid.length;
        int cols = grid[0].length;
        int freshOranges = 0;
        int minutes = 0;

        Queue<int[]> queue = new LinkedList<>();

        // Count fresh oranges and enqueue rotten oranges
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    freshOranges++;
                } else if (grid[i][j] == 2) {
                    queue.offer(new int[]{i, j});
                }
            }
        }

        // If there are no fresh oranges initially, return 0
        if (freshOranges == 0) {
            return 0;
        }

        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        while (!queue.isEmpty()) 
        {
            int size = queue.size();

            for (int i = 0; i < size; i++)
             {
                int[] current = queue.poll();

                for (int[] dir : directions) 
                {
                    int newRow = current[0] + dir[0];
                    int newCol = current[1] + dir[1];

                    if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1) 
                    {
                        grid[newRow][newCol] = 2;
                        freshOranges--;
                        queue.offer(new int[]{newRow, newCol});
                    }
                } // this loop updates all four adjacent sides if there are any fresh oranges
            } iterate i times

            if (!queue.isEmpty())
             {
                minutes++;
            }
        }// each queue iteration we increment minute

        return freshOranges == 0 ? minutes : -1; 
   // this return minutes if freshoranges would be zero at minutes if not possible return -1
    }
}