205. Isomorphic Strings

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true

;;;;
java
;;;;
class Solution {
    public boolean isIsomorphic(String s, String t) {
        
        int[] mappingDictStoT = new int[256];
        Arrays.fill(mappingDictStoT, -1);
        
        int[] mappingDictTtoS = new int[256];
        Arrays.fill(mappingDictTtoS, -1);
        
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            
            // Case 1: No mapping exists in either of the dictionaries
            if (mappingDictStoT[c1] == -1 && mappingDictTtoS[c2] == -1) {
                mappingDictStoT[c1] = c2;
                mappingDictTtoS[c2] = c1;
            }
            
            // Case 2: Ether mapping doesn't exist in one of the dictionaries or Mapping exists and
            // it doesn't match in either of the dictionaries or both 
            else if (!(mappingDictStoT[c1] == c2 && mappingDictTtoS[c2] == c1)) {
                return false;
            } 
        }
        
        return true;
    }
}

;;;;;;;;;;;;;;;
mappingDictStoT[c1] = c2;
why does this line of code dont give incompatible types error
??????????????????????????????????
The line mappingDictStoT[c1] = c2; in your code doesn't give an incompatible types error because both c1 and c2 are char data types. In Java, when you declare an array, its indices can be of type int, and in this case, c1 is treated as an integer representing the ASCII value of the character.

When you use mappingDictStoT[c1], it's essentially using the ASCII value of the character c1 as an index in the mappingDictStoT array.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

