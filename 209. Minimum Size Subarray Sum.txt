209. Minimum Size Subarray Sum

Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

;;;
java
;;;;
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
     int minLength = Integer.MAX_VALUE;
        int left = 0;
        int sum = 0;

        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];

            while (sum >= target) {
                // Update the minimum length
                minLength = Math.min(minLength, right - left + 1);

                // Move the left pointer to reduce the sum
                sum -= nums[left];
                left++;
            }
        }

        // If minLength is still Integer.MAX_VALUE, no subarray found
        return (minLength == Integer.MAX_VALUE) ? 0 : minLength;
    }
}