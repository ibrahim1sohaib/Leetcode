90. Subsets II

Given an integer array nums that may contain duplicates, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.



Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]



class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums); // Sort the array to handle duplicates
        backtrack(nums, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] nums, int start, List<Integer> current, List<List<Integer>> result) {
        result.add(new ArrayList<>(current));

        for (int i = start; i < nums.length; i++) {
            // Skip duplicates to avoid duplicate subsets
            if (i > start && nums[i] == nums[i - 1]) {
                continue;
            }

            current.add(nums[i]);
            backtrack(nums, i + 1, current, result);
            current.remove(current.size() - 1);
        }
    }
}


;;;;;
explain
;;;;;;

initial State (Empty Set):

result: [] (empty list)
start: 0
current: [] (empty list)

Iteration 1 (i = 0, nums[0] = 1):

Add [1] to the result.
Recursively call backtrack with start = 1 and current = [1].
Inside the recursive call, add [1, 2] to the result.
Recursively call again with start = 2 and current = [1, 2].
Inside this recursive call, add [1, 2, 2] to the result.
Backtrack and remove 2 from current.
Backtrack and remove 1 from current.


Iteration 2 (i = 1, nums[1] = 2):

Since nums[1] is not a duplicate of the previous number (nums[0]), we proceed.
Add [2] to the result.
Recursively call backtrack with start = 2 and current = [2].
Inside this call, add [2, 2] to the result.
Backtrack and remove 2 from current.


Iteration 3 (i = 2, nums[2] = 2):

Skip this iteration because nums[2] is a duplicate of the previous number (nums[1]).



The final result will be [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]
