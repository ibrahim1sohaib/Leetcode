106. Construct Binary Tree from Inorder and Postorder Traversal

Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

;;;;;
java
;;;;;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,Integer> map=null;
    int post_index=0;
    public TreeNode buildTree(int[] inorder, int[] post) {
     map=new HashMap<>();
        post_index=post.length-1;
        
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        return construct(post,0,inorder.length-1);
    }
    
    public TreeNode construct(int[] post,int instart,int inend){
        if(instart>inend) return null;
        
        int index=map.get(post[post_index]);
                
        TreeNode root=new TreeNode(post[post_index]);
        
        post_index--;
        
        root.right=construct(post,index+1,inend);
        root.left=construct(post,instart,index-1);
         
        return root;
    }
}

???????????
solution2:
??????????????

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if (inorder == null || postorder == null || inorder.length != postorder.length) {
            return null;
        }
        
        return buildTreeHelper(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
    }
    
    private TreeNode buildTreeHelper(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd) {
        if (inStart > inEnd || postStart > postEnd) {
            return null;
        }
        
        int rootVal = postorder[postEnd];
        TreeNode root = new TreeNode(rootVal);
        
        // Find the index of the root value in inorder array
        int rootIndex = inStart;
        while (rootIndex <= inEnd) {
            if (inorder[rootIndex] == rootVal) {
                break;
            }
            rootIndex++;
        }
        
        // Calculate the number of nodes in the left subtree
        int leftSubtreeSize = rootIndex - inStart;
        
        // Recursively build left and right subtrees
        root.left = buildTreeHelper(inorder, inStart, rootIndex - 1, postorder, postStart, postStart + leftSubtreeSize - 1);
        root.right = buildTreeHelper(inorder, rootIndex + 1, inEnd, postorder, postStart + leftSubtreeSize, postEnd - 1);
        
        return root;
    }
}

;;;;;;;;;;;;;;;;;;;;;;;;
