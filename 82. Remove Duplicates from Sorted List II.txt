82. Remove Duplicates from Sorted List II


Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

;;;;
java
;;;;
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 class Solution {
        public ListNode deleteDuplicates(ListNode head) {
            ListNode dummyHead = new ListNode(-1), dummy = dummyHead;
            while (head != null) {
                ListNode start = head;
                int count = 0;
                while (head != null && start.val == head.val) {
                    head = head.next;
                    count++;
                }
                if (count > 1) {
                    start = head;
                } else {
                    dummy.next = start;
                    dummy = dummy.next;
                }
            }
            dummy.next = null;

            return dummyHead.next;
        }
    }