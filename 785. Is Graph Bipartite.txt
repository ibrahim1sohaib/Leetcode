785. Is Graph Bipartite?

There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:

There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

example:

Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.


;;;;;
java
;;;;;
class Solution {
    public boolean isBipartite(int[][] graph) {
        int n= graph.length;
        int[] colour= new int[n];
        Arrays.fill(colour,-1);
        for(int i=0;i<n;i++)
        {
            if(colour[i]==-1 && !isBipartiteBFS(graph, colour,i))
            {
              return false;
            }
        }
        return true;
    }
    private Boolean isBipartiteBFS(int[][] graph, int[] colour, int start)
    {
       Queue<Integer> queue = new LinkedList<>();
       queue.offer(start);
       colour[start]=0;

       while(!queue.isEmpty())
       {
           int current= queue.poll();
           for(int neighbour: graph[current])
           {
               if(colour[neighbour]== -1)
               {
                   colour[neighbour]= 1- colour[current];
                   queue.offer(neighbour);
               }
               else if(colour[neighbour]== colour[current])
               {
                   return false;
               }
           }
       }

        return true;
    }
}
.............



;;;;;;;;;;;;
explanation
;;;;;;;;;;;;

int[][] graph = {{1,3},{0,2},{1,3},{0,2}};

Now let's go through the iterations:

Initialization:

n = 4, colors = [-1, -1, -1, -1]

Iteration 1 (Node 0):

Start with node 0.
Color node 0 with color 0.
Enqueue neighbors 1 and 3 with color 1. //(1-color[curr]) -> 1-0 -> 1



Iteration 2 (Node 1):

Start with node 1.
Color node 1 with color 1.
Enqueue neighbors 0 and 2 with color 0.

Iteration 3 (Node 3):

Start with node 3.
Color node 3 with color 1.
Enqueue neighbors 0 and 2 (no change in color).

Iteration 4 (Node 2):

Start with node 2.
Color node 2 with color 0.
Enqueue neighbors 1 and 3 (no change in color).

Result:

The traversal completes without conflicts.
The graph is bipartite.
The function returns true.
So, the corrected result for the given graph is true. 