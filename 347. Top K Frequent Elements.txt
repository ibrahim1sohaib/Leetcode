347. Top K Frequent Elements

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

;;;;
java
;;;;;

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // Create a frequency map to store the count of each element
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Create a max heap to store elements based on their frequencies
        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap =
                new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());

        // Add entries from the frequency map to the max heap
        maxHeap.addAll(frequencyMap.entrySet());

        // Retrieve the top k frequent elements from the max heap
        int[]  result = new int[k] ;
        for (int i = 0; i < k; i++) {
            result[i]=maxHeap.poll().getKey();
        }

        return result;
    }
}    

