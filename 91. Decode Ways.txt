https://leetcode.com/problems/decode-ways/

// watch editorial solution2 diagramm for doubt

91. Decode Ways

A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

Example 1:

Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).

;;;
ideology
;;;;
dp[i] = Number of ways of decoding substring s[:i]. So we might say dp[i] = dp[i-1] + dp[i-2]

;;;;
java
;;;
class Solution {

    public int numDecodings(String s) {
        if(s== null || s.length()==0)
        {
            return 0;
        }
        int n= s.length();
        int[] dp = new int[n+1];
        dp[0]=1;
        dp[1]= s.chartAt(0)==0 ? 0 : 1;
        // check the first character

        for(int i=2;i<s.length();i++)
        {
            int oneDigit = Integer.parseInt(s.substring(i-1,i)); //[1,2]
            int twoDigit = Integer.parseInt(s.substring(i-2,i));// [0,2]
            
            // if curr digit not 0, add ways of decoding single digit
            if(oneDigit!=0)
            {
                dp[i]+=dp[i-1];
            }
             // if two digits form a valid decoding, add ways of decoding two digitts ago
            if(twoDigit>=10 && twoDigit<=26)
            {
                dp[i]+=dp[i-2];
            }

        }
        return dp[n];
    }
}