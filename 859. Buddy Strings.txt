859. Buddy Strings

Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

For example, swapping at indices 0 and 2 in "abcd" results in "cbad".
 

Example 1:

Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.


;;;;
java
;;;;
class Solution {
    public boolean buddyStrings(String s, String goal) {
        // check if lengths are same or not
        if(s.length()!=goal.length())
        {
            return false;
        }
        // check if both the strings are equal,
        //if yes, check if  there are repeating chars are present
        if(s.equals(goal))
        {
            int[] count= new int[26];
            for(char c:s.toCharArray())
            {
                count[c-'a']+=1;
                if(count[c-'a']>1)
                {
                    return true;
                }
            }
            return false;
        }
        // if both strings are diff
        // firstDiff stores first position where char are diff from s and goal
        // secondDiff stores second position where char are diff
        // if there are still diff chars i.e more than 2 return false

        int firstDiff=-1, secondDiff=-1;
        for(int i=0;i<s.length();i++)
        {
             if(s.charAt(i)!=goal.charAt(i))
             {
                 if(firstDiff ==-1)
                 {
                     firstDiff=i;
                 }
                else if(secondDiff ==-1)
                 {
                     secondDiff=i;
                 }
                 else // more than two diff chars
                 {
                   return false;
                 }
             }
        }

        return secondDiff!=-1 && s.charAt(firstDiff) == goal.charAt(secondDiff) &&
                                 s.charAt(secondDiff) == goal.charAt(firstDiff);
        
    }
}