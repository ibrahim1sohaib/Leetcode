114. Flatten Binary Tree to Linked List

Given the root of a binary tree, flatten the tree into a "linked list":

The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.

The "linked list" should be in the same order as a pre-order traversal of the binary tree.

Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]

;;;;;
java
;;;;
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
   public void flatten(TreeNode root) {
        if (root == null) return;
        
        // Flatten the left subtree
        flatten(root.left);
        
        // Flatten the right subtree
        flatten(root.right);
        
        // Store the right subtree in a temporary variable
        TreeNode temp = root.right;
        
        // Move the flattened left subtree to the right
        root.right = root.left;
        root.left = null;
        
        // Traverse to the end of the flattened left subtree
        while (root.right != null) {
            root = root.right;
        }
        
        // Attach the flattened right subtree to the end of the flattened left subtree
        root.right = temp;
    }
}