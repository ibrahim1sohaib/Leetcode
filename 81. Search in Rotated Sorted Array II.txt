81. Search in Rotated Sorted Array II

There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.


Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

;;;;
java
;;;;
public class Solution {
    public boolean search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        int left = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return true;
            }
            
            if (nums[left] < nums[mid]) { // left part is sorted
                if (nums[left] <= target && target < nums[mid]) { // target is in the left part
                    right = mid - 1;
                } else { // target is in the right part
                    left = mid + 1;
                }
            } else if (nums[left] > nums[mid]) { // right part is sorted
                if (nums[mid] < target && target <= nums[right]) { // target is in the right part
                    left = mid + 1;
                } else { // target is in the left part
                    right = mid - 1;
                }
            } else { // nums[left] == nums[mid], we don't know which part is sorted
                // we just try to find the target in both parts
                left++;
            }
        }
        
        return false;
    }
}

 