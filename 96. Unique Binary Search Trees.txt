96. Unique Binary Search Trees

Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n


Example 1:

Input: n = 3
Output: 5

;;;;
java
;;;;

class Solution {
     public static int numTrees(int n) {
        if (n <= 0) {
            return 0;
        }

        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
    //Base cases: There is one unique BST with 0 or 1 node.
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                dp[i] += dp[j - 1] * dp[i - j]; 
                // j-1 is left subtree
                //i-j is right subtree
            }
        }

        return dp[n];
    }

}

;;;;;;;;;;
explain
;;;;;;;;

The expression dp[i] += dp[j - 1] * dp[i - j] in the context of the Unique Binary Search Trees problem represents the recursive formula for calculating the number of unique BSTs with i nodes. Let's break down why we use this formula:

dp[i]: Represents the total number of unique BSTs with i nodes.

dp[j - 1]: Represents the number of unique left subtrees when the root is at position j.

dp[i - j]: Represents the number of unique right subtrees when the root is at position j.