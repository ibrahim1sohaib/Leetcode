1209. Remove All Adjacent Duplicates in String II


You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.


;;;;
java
;;;;

class Solution {
    static class Pair{
        char ch;
        int freq;
        Pair(char ch, int freq)
        {
            this.ch = ch;
            this.freq = freq;
        }
    }
    public String removeDuplicates(String s, int k) {
        Stack<Pair> stack = new Stack<>();

        for(char c:s.toCharArray())
        {
            if(!stack.isEmpty() && stack.peek().ch == c)
            {
                stack.peek().freq++;
            }
            else
            {
                stack.push(new Pair(c,1));
            }

            if(stack.peek().freq== k)
            {
                stack.pop();
            }
        }

        StringBuilder res= new StringBuilder();
        for(Pair p: stack)
        {
            for(int i=0;i< p.freq;i++)
            {
                res.append(p.ch);
            }

        }
        return res.toString();       
    }
}
..................