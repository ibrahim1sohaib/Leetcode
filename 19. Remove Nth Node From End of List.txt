19. Remove Nth Node From End of List

Given the head of a linked list, remove the nth node from the end of the list and return its head.

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

;;;;;
java
;;;;;
// Definition for singly-linked list.
class ListNode {
    int val;
    ListNode next;
    
    public ListNode(int x) {
        val = x;
    }
}

public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Create a dummy node to handle edge cases
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        int length = 0;
        ListNode first = head;

        // Calculate the length of the linked list
        while (first != null) {
            length++;
            first = first.next;
        }

        // Calculate the position to remove
        length -= n;
        first = dummy;

        // Move the first pointer to the node before the one to be removed
        while (length > 0) {
            length--;
            first = first.next;
        }

        // Remove the Nth node from the end
        first.next = first.next.next;

        // Return the modified linked list
        return dummy.next;
    }

    public static void main(String[] args) {
        // Example usage:

        // Creating a sample linked list
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        // Using the Solution class to perform the removal
        Solution solution = new Solution();
        ListNode modifiedList = solution.removeNthFromEnd(head, 2);

        // Displaying the modified list
        printList(modifiedList);
    }

    // Helper method to print the linked list
    private static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }
}



Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

;;;;
java
;;;;
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 class Solution {
        public ListNode deleteDuplicates(ListNode head) {
            ListNode dummyHead = new ListNode(-1), dummy = dummyHead;
            while (head != null) {
                ListNode start = head;
                int count = 0;
                while (head != null && start.val == head.val) {
                    head = head.next;
                    count++;
                }
                if (count > 1) {
                    start = head;
                } else {
                    dummy.next = start;
                    dummy = dummy.next;
                }
            }
            dummy.next = null;

            return dummyHead.next;
        }
    }