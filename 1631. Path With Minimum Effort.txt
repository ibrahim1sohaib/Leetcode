1631. Path With Minimum Effort


You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.
 
Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.







;;;;;
java
;;;;;
class Solution {
    public int minimumEffortPath(int[][] heights) {
        int m = heights.length;
        int n = heights[0].length;

        int[][] dp = new int[m][n];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[2], b[2]));
        Set<String> visited = new HashSet<>();

        pq.offer(new int[]{0, 0, 0});

        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        while (!pq.isEmpty()) {
            int[] current = pq.poll();
            int row = current[0];
            int col = current[1];
            int effort = current[2];

            if (row == m - 1 && col == n - 1) {
                return effort;
            }

            // Check if the current cell has been visited
            if (visited.contains(row + "," + col)) {
                continue;
            }

            visited.add(row + "," + col);

            for (int[] dir : directions) {
                int newRow = row + dir[0];
                int newCol = col + dir[1];

                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n) {
                    int newEffort = Math.max(effort, Math.abs(heights[row][col] - heights[newRow][newCol]));

                    // Check if the up neighbor's position has been visited
                    if (dir[0] == -1 && visited.contains(newRow + "," + newCol)) {
                        continue;
                    }

                    if (newEffort < dp[newRow][newCol]) {
                        dp[newRow][newCol] = newEffort;
                        pq.offer(new int[]{newRow, newCol, newEffort});
                    }
                }
            }
        }

        return -1; // Unreachable
    }
}
.............

;;;;;
pseudocode
;;;;;;;;;;

function minimumEffortPath(heights):
    m = number of rows in heights
    n = number of columns in heights
    
    create a 2D array dp with dimensions m x n and fill with Integer.MAX_VALUE
    create an empty PriorityQueue pq with custom comparator for minimum effort
    
    enqueue the start point (0, 0, 0) into pq
    
    create an empty Set visited to keep track of visited cells
    
    define directions as {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}
    
    while pq is not empty:
        dequeue the cell with the minimum effort from pq
        currentRow = current[0]
        currentCol = current[1]
        currentEffort = current[2]
        
        if (currentRow, currentCol) is the destination:
            return currentEffort
        
        if (currentRow, currentCol) is visited:
            continue
        
        add (currentRow, currentCol) to visited
        
        for each direction in directions:
            newRow = currentRow + direction[0]
            newCol = currentCol + direction[1]
            
            if (newRow, newCol) is within the grid:
                newEffort = max(currentEffort, abs(heights[currentRow][currentCol] - heights[newRow][newCol]))
                
                if up neighbor (direction[0] == -1) and (newRow, newCol) is visited:
                    continue
                
                if newEffort < dp[newRow][newCol]:
                    update dp[newRow][newCol] with newEffort
                    enqueue (newRow, newCol, newEffort) into pq
    
    return -1  # destination is unreachable

# Example usage:
heights = [
    [1, 2, 2],
    [3, 8, 2],
    [5, 3, 5]
]
result = minimumEffortPath(heights)
print(result)  # Output: 2

......................................................
