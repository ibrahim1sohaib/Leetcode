63. Unique Paths II

You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 10^9.

Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right


;;;;
java
;;;;

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;

        // If the starting cell has an obstacle, there is no way to reach the destination.
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }

        // Initialize the first row and first column based on obstacles.
        obstacleGrid[0][0] = 1;
        for (int i = 1; i < m; i++) {
            obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;
        }
        for (int j = 1; j < n; j++) {
            obstacleGrid[0][j] = (obstacleGrid[0][j] == 0 && obstacleGrid[0][j - 1] == 1) ? 1 : 0;
        }

        // Fill the DP table to compute the unique paths.
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 0) {
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
                } else {
                    obstacleGrid[i][j] = 0;
                }
            }
        }

        return obstacleGrid[m - 1][n - 1];
    }

   
}

........................................
Algorithm: Unique Paths with Obstacles
........................................

Input:

obstacleGrid: a 2D array representing the grid with obstacles.
Initialize:

Set m as the number of rows in obstacleGrid.
Set n as the number of columns in obstacleGrid.
Handle Edge Case:

If the top-left cell (0, 0) has an obstacle, return 0 (no way to reach the destination).
Initialize DP Table:

Update the first row and first column based on obstacles.
For the first row (i = 0), set obstacleGrid[0][j] to 1 if obstacleGrid[0][j] == 0 and obstacleGrid[0][j - 1] == 1; otherwise, set it to 0.
For the first column (j = 0), set obstacleGrid[i][0] to 1 if obstacleGrid[i][0] == 0 and obstacleGrid[i - 1][0] == 1; otherwise, set it to 0.
Fill DP Table:

Iterate over each cell in the grid (excluding the first row and first column).
If the current cell doesn't have an obstacle:
Update obstacleGrid[i][j] with the sum of paths from the above cell and the left cell (obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1]).
If the current cell has an obstacle, set obstacleGrid[i][j] to 0.
Result:

The bottom-right cell (obstacleGrid[m - 1][n - 1]) now contains the number of unique paths.
Output:

Return obstacleGrid[m - 1][n - 1].

