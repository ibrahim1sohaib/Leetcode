62. unique paths 
// same as edit distance problem
// here we initialize row 0 and column as 1's.
// we iterate dp array and fill sum from the top and left most element sum
//[m-1][n-1] gives the minimum edit distance also known as unique path

There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 10^9.


;;;;;
java
;;;;;

 class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n]; 
        
        // Initialize the first row and first column to 1
        for (int i = 0; i < m; i++) {
            dp[i][0] = 1;
        }
        for (int j = 0; j < n; j++) {
            dp[0][j] = 1;
        }
        
        // Calculate unique paths for each cell using dynamic programming
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        
        // Return the number of unique paths from top-left to bottom-right
        return dp[m - 1][n - 1];
    }
}
