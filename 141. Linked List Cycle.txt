141. Linked List Cycle

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

Example 1:

Input: head = [3,2,0,-4], pos = 1

3---2--0----4
    |       |
    ---------
        
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

;;;;;;
java
;;;;;;
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class LinkedListCycle {

    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }

        ListNode slow = head;
        ListNode fast = head.next;

        while (slow != fast) {
            if (fast == null || fast.next == null) {
                return false;  // If there is no cycle, the fast pointer will reach the end
            }

            slow = slow.next;
            fast = fast.next.next;
        }

        return true;  // If there is a cycle, the fast and slow pointers will meet at some point
    }

    public static void main(String[] args) {
        // Example usage:
        ListNode head = new ListNode(3);
        head.next = new ListNode(2);
        head.next.next = new ListNode(0);
        head.next.next.next = new ListNode(-4);

        // Creating a cycle
        head.next.next.next.next = head.next;

        LinkedListCycle solution = new LinkedListCycle();
        System.out.println(solution.hasCycle(head));  // Output: true
    }
}
;;;;;;;;;;;;;;;;;;;;
