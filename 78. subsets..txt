78. subsets.

Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

;;;;;
java
;;;;

import java.util.ArrayList;
import java.util.List;

public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, 0, new ArrayList<>(), result);
        return result;
    }
    
    private void backtrack(int[] nums, int start, List<Integer> current, List<List<Integer>> result) {
        result.add(new ArrayList<>(current));
        
        for (int i = start; i < nums.length; i++) {
            current.add(nums[i]);
            backtrack(nums, i + 1, current, result);
            current.remove(current.size() - 1);
        }
    }
}


;;;;;;
explain
;;;;;;

initially
cur=[] , result=[]

backtrack
result.add[] -> result=[[]]

rec call i=0<3
*start at i=1
cur=[1], result=[[],[1]]
rec call i=1<3
cur=[1,2], result=[[],[1],[1,2]]
rec call i=2<3
cur=[1,2,3], result=[[],[1],[1,2],[1,2,3]]
backtrack remove 3 from current cur[1,2]
backtrack  remove 2 from current cur[1]
cur=[1,3] , result=[[],[1],[1,2],[1,2,3],[1,3]]
backtrack  remove 3
backtrack  remove 1

*start at i=2
cur=[2], result=[[],[1],[1,2],[1,2,3],[1,3],[2]]
rec call backtrack start=3
cur=[2,3], result=[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3]]
backtrack  remove 3
backtrack  remove 1

* start at i=3
cur=[3], result=[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]
backtrack remove 3




