456. 132 Pattern

Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

***algorithm*** (https://leetcode.com/problems/132-pattern/editorial/)

The preprocessing required is to just find the best nums[i] value corresponding to every nums[j] value.

We maintain thes values in a minminmin array. Thus, min[j] now refers to the best nums[i] value for a particular nums[j].


Now, we traverse back from the end of the nums array to find the nums[k]'s. Suppose, we keep a track of the nums[k] values which can potentially satisfy the 132 criteria for the current nums[j]. We know, one of the conditions to be satisfied by such a nums[k] is that it must be greater than nums[i]. Or in other words, we can also say that it must be greater than min[j] for a particular nums[j] chosen.

Once it is ensured that the elements left for competing for the nums[k] are all greater than min[j](or nums[i]), our only task is to ensure that it should be lesser than nums[j].

If this element, nums[k] satisfies nums[k]<nums[j], we've found a 132 pattern.


;;;;;
java
;;;;;

class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;

        if (n < 3) {
            return false;
        }

        int[] minArray = new int[n];
        minArray[0] = nums[0];

        // Create an array to store the minimum element up to index i
        for (int i = 1; i < n; i++) {
            minArray[i] = Math.min(minArray[i - 1], nums[i]);
        }

        Stack<Integer> stack = new Stack<>();

        // Iterate from right to left to find the 132 pattern
        for (int j = n - 1; j >= 0; j--) {
            // Check if the current element is greater than the minimum element
            if (nums[j] > minArray[j]) {
                // Pop elements from the stack until a greater element than minArray[j] is found
                while (!stack.isEmpty() && stack.peek() <= minArray[j]) {
                    stack.pop();
                }

                // If a valid 132 pattern is found, return true
                if (!stack.isEmpty() && stack.peek() < nums[j]) {
                    return true;
                }


                stack.push(nums[j]);
            }
        }

        return false;
    }
}

......................

