93. Restore IP Addresses

A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

Example 1:

Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]

;;;;
java
;;;;

class Solution {
    List<String> ans = new ArrayList<>();
    String str;
    public List<String> restoreIpAddresses(String s) {
        str = s;
        magical("", 0, 0);
        return ans;
    } 

    void magical( String path, int index, int dots) {
        if (dots > 4) return; // not a valid ip
        if (dots == 4 && index >= str.length())
         { // 4 dots and at last index
            ans.add(path.substring(0,path.length()-1));
            return;
        }
        for (int length = 1; length <= 3 && index + length <= str.length(); length++)
         { //starting from index we create 3 subtress of length 1 2 3
           int currLen = index + length;
            String num = str.substring(index, currLen);
            if (num.charAt(0) == '0' && length != 1) break;
            else if (Integer.parseInt(num) <= 255)
            {
                magical( path + num + ".", currLen,dots + 1);
            }
        }
    }
}



;;;;;;;;
explain
;;;;;;;;

Function restoreIpAddresses(s):
    Initialize an empty list ans to store the result
    Set the variable str to the input string s
    Call the magical function with an empty path, index 0, and dots 0
    Return the ans list

Function magical(path, index, dots):
    // Base case: If more than 4 dots are encountered, return
    if dots > 4:
        return

    // Base case: If 4 dots are reached and the index is at the end of the string, add the path to ans
    if dots == 4 and index >= str.length():
        ans.add(path.substring(0, path.length() - 1))
        return

    // Iterate over possible lengths of the next segment (1 to 3)
    for length from 1 to 3:
        // Extract the substring of the given length from the current index
        String num = str.substring(index, index + length)

        // Check if the segment starts with '0' and is not a single character
        if num.charAt(0) == '0' and length != 1:
            // Break the loop as leading zeros are not allowed
            break
        // Check if the integer value of the segment is less than or equal to 255
        else if Integer.parseInt(num) <= 255:
            // Recursive call to magical with updated parameters
            magical(path + str.substring(index, index + length) + ".", index + length, dots + 1)
